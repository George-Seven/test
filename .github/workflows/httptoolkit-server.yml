name: Build HTTP Toolkit Server
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        ARCH: [arm, aarch64, x86, x86_64]
      fail-fast: false
    steps:
      - name: Set Build Platform Architecture
        run: |
          if [ "${{ matrix.ARCH }}" = "aarch64" ]; then
            echo "PLATFORM=arm64" >> $GITHUB_ENV
          elif [ "${{ matrix.ARCH }}" = "x86_64" ]; then
            echo "PLATFORM=amd64" >> $GITHUB_ENV
          elif [ "${{ matrix.ARCH }}" = "arm" ]; then
            echo "PLATFORM=arm" >> $GITHUB_ENV
          elif [ "${{ matrix.ARCH }}" = "x86" ]; then
            echo "PLATFORM=386" >> $GITHUB_ENV
          else
            echo "Unsupported architecture"
            exit 1
          fi

      - name: Build HTTP Toolkit
        run: |
          # Support for ARM and ARM64
          if [[ "${{ matrix.ARCH }}" == "aarch64" ]]; then
              docker run --rm --privileged aptman/qus -s -- -p aarch64
          elif [[ "${{ matrix.ARCH }}" == "arm" ]]; then
              docker run --rm --privileged aptman/qus -s -- -p arm
          fi

          # Build HTTP Toolkit Server
          _HTTPTOOLKIT_LATEST_COMMIT_HASH="$(git ls-remote https://github.com/httptoolkit/httptoolkit-server HEAD | cut -f 1)"
          _NODE_VERSION="$(curl -sL "https://github.com/httptoolkit/httptoolkit-server/raw/${_HTTPTOOLKIT_LATEST_COMMIT_HASH}/package-lock.json" | jq -r '.packages."".engines.node' | sed -E "s/^v//")"
          _HTTPTOOLKIT_VERSION="$(curl -sL "https://github.com/httptoolkit/httptoolkit-server/raw/${_HTTPTOOLKIT_LATEST_COMMIT_HASH}/package-lock.json" | jq -r .version)"

          echo '
          FROM --platform=linux/'${{ env.PLATFORM }}' debian:bullseye AS builder

          ENV _NODE_VERSION '$_NODE_VERSION'
          ENV _HTTPTOOLKIT_VERSION '$_HTTPTOOLKIT_VERSION'
          ENV _HTTPTOOLKIT_LATEST_COMMIT_HASH '$_HTTPTOOLKIT_LATEST_COMMIT_HASH'

          SHELL ["/bin/bash", "-c"]

          RUN set -eux; \
              export DEBIAN_FRONTEND=noninteractive; \
              apt update; \
              apt install -y dialog apt-utils; \
              apt upgrade -y; \
              apt install -y --no-install-recommends curl ca-certificates git python3 xz-utils make file cmake g++ libssl-dev; \
              update-alternatives --install /usr/bin/chromium httptoolkit "$(which true)" 0; \
              update-alternatives --install /usr/bin/chromium-browser httptoolkit "$(which chromium)" 0; \
              export CHROME_BIN="$(which chromium)"; \
              touch ~/.bashrc; \
              curl -sLo- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash; \
              source ~/.bashrc; \
              [ "$(dpkg --print-architecture)" = "i386" ] && mkdir -p ~/.nvm/versions/node/v${_NODE_VERSION} && curl -o- https://unofficial-builds.nodejs.org/download/release/v${_NODE_VERSION}/node-v${_NODE_VERSION}-linux-x86.tar.gz | tar zx -C ~/.nvm/versions/node/v${_NODE_VERSION} --strip-components=1 && nvm use $_NODE_VERSION && nvm alias default $_NODE_VERSION || nvm install $_NODE_VERSION; \
              git clone  https://github.com/httptoolkit/httptoolkit-server ~/httptoolkit-server; \
              cd ~/httptoolkit-server; \
              git reset --hard $_HTTPTOOLKIT_LATEST_COMMIT_HASH; \
              [ "$(dpkg --print-architecture)" != "arm64" ] && dpkg --print-architecture | grep -q arm && npm install @sentry/cli; \
              sed -i "/\('\''Building for Darwin'\''\)/,/\(buildScript, \['\''win32'\''\], { cwd: OUTPUT_DIR, stdio: '\''inherit'\'' }\)/d" ~/httptoolkit-server/pack.ts; \
              npm ci; \
              [ "$(dpkg --print-architecture)" = "i386" ] && sed -i -E "/(download|tarball).*shasums/Id" ~/httptoolkit-server/node_modules/@oclif/dev-cli/lib/tarballs/node.js; \
              [ "$(dpkg --print-architecture)" = "i386" ] && sed -i "s/let nodeBase = \`node-v/if \(arch === '\''ia32'\''\)\n        arch = '\''x86'\'';\n    let nodeBase = \`node-v/g" ~/httptoolkit-server/node_modules/@oclif/dev-cli/lib/tarballs/node.js; \
              [ "$(dpkg --print-architecture)" = "i386" ] && sed -i "s#let url = \`https://nodejs.org/dist/v#let url = \`https://unofficial-builds.nodejs.org/download/release/v#g" ~/httptoolkit-server/node_modules/@oclif/dev-cli/lib/tarballs/node.js; \
              npm run build:src; \
              npm run build:release; \
              mkdir -p ~/httptoolkit-server-release; \
              tar zxf ~/httptoolkit-server/build/dist/v${_HTTPTOOLKIT_VERSION}/httptoolkit-server-v${_HTTPTOOLKIT_VERSION}-linux-*.tar.gz -C ~/httptoolkit-server-release --strip-components=1; \
              [ "$(dpkg --print-architecture)" = "i386" ] && [ -d ~/httptoolkit-server/node_modules/node-datachannel ] && ( cd ~/httptoolkit-server/node_modules/node-datachannel && rm -rf build && npm install --omit=dev ); \
              rm -rf ~/httptoolkit-server; \
              mv ~/httptoolkit-server-release ~/httptoolkit-server

          FROM --platform=linux/'${{ env.PLATFORM }}' debian:bullseye-slim

          COPY --from=builder /root/httptoolkit-server /root/httptoolkit-server

          USER httptoolkit:httptoolkit

          WORKDIR /root/httptoolkit-server

          CMD ["bin/httptoolkit-server", "start"]
          ' | docker build --no-cache --force-rm --platform "linux/${{ env.PLATFORM }}" -t httptoolkit-server -

          docker save httptoolkit-server | gzip --best > httptoolkit-server.tar.gz
   
          du -h httptoolkit-server.tar.gz

      - name: Upload Release
        uses: svenstaro/upload-release-action@v2
        with:
           repo_token: ${{ secrets.GITHUB_TOKEN }}
           file: "httptoolkit-server.tar.gz"
           asset_name: "httptoolkit-server-${{ matrix.ARCH }}.tar.gz"
           tag: "httptoolkit-server"
           release_name: "HTTP Toolkit Server"
           overwrite: true
