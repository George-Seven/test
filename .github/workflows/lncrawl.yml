name: Build lncrawl RootFS Tarball
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        ARCH: [arm, aarch64, x86, x86_64]
      fail-fast: false
    steps:
      - name: Set Build Platform Architecture
        run: |
          if [ "${{ matrix.ARCH }}" = "aarch64" ]; then
            echo "PLATFORM=arm64" >> $GITHUB_ENV
          elif [ "${{ matrix.ARCH }}" = "x86_64" ]; then
            echo "PLATFORM=amd64" >> $GITHUB_ENV
          elif [ "${{ matrix.ARCH }}" = "arm" ]; then
            echo "PLATFORM=arm" >> $GITHUB_ENV
          elif [ "${{ matrix.ARCH }}" = "x86" ]; then
            echo "PLATFORM=386" >> $GITHUB_ENV
          else
            echo "Unsupported architecture"
            exit 1
          fi

      - name: Build lncrawl RootFS Tarball
        run: |
          # Support for ARM and ARM64
          if [[ "${{ matrix.ARCH }}" == "aarch64" ]]; then
              docker run --rm --privileged aptman/qus -s -- -r -p aarch64
          elif [[ "${{ matrix.ARCH }}" == "arm" ]]; then
              docker run --rm --privileged aptman/qus -s -- -r -p arm
          fi

          # Build lncrawl RootFS Tarball

          echo '
          FROM --platform=linux/'${{ env.PLATFORM }}' alpine:3.19
          
          ENV PIP_BREAK_SYSTEM_PACKAGES=1 PIP_ROOT_USER_ACTION=ignore 

          WORKDIR /root
          
          RUN set -eux; \
                  apk --no-cache add chromium chromium-chromedriver py3-pip; \
                  apk --no-cache add --virtual build-deps g++; \
                  pip3 install -U lightnovel-crawler; \
                  pip cache purge; \
                  apk del build-deps; \
                  apk cache clear --purge 2>/dev/null || true; \
                  _SOURCE_DIR="$(python3 -c "import site; print(*site.getsitepackages(), sep='\''\n'\'')")/sources"; \
                  _MTL_TEMPLATE='\''# -*- coding: utf-8 -*-_NEWLINE__NEWLINE_from lncrawl.templates.novelmtl import NovelMTLTemplate_NEWLINE__NEWLINE__NEWLINE_class NovelMtlCrawler(NovelMTLTemplate):_NEWLINE_    base_url = [_NEWLINE_        "https://_URL/",_NEWLINE_    ]_NEWLINE_'\''; \
                  mkdir -p "$_SOURCE_DIR/mtl"; \
                  _URLS="www.fanmtl.com www.wuxiabox.com"; \
                  for _URL in $_URLS; do \
                      echo "$_MTL_TEMPLATE" | sed "s/_NEWLINE_/\n/g" | sed "s/_URL/$_URL/" > "$_SOURCE_DIR/mtl/${_URL}.py"; \
                  done; \
                  rm -rf /tmp/* /tmp/.* 2>/dev/null || true
          
          CMD ["ash"]
          
          ' | docker build --pull --no-cache --force-rm --platform "linux/${{ env.PLATFORM }}" -t lncrawl -
          docker create --name=lncrawl lncrawl
          docker export -o lncrawl.tar lncrawl
          mkdir etc
          echo "nameserver 8.8.8.8" | sudo tee etc/resolv.conf >/dev/null
          echo "127.0.0.1 localhost" | sudo tee etc/hosts >/dev/null
          echo "::1 localhost" | sudo tee -a etc/hosts >/dev/null
          tar -rf lncrawl.tar etc/resolv.conf etc/hosts
          tar -f lncrawl.tar --delete .dockerenv
          gzip --best lncrawl.tar

      - name: Upload Release
        uses: svenstaro/upload-release-action@v2
        with:
           repo_token: ${{ secrets.GITHUB_TOKEN }}
           file: "lncrawl.tar.gz"
           asset_name: "lncrawl-${{ matrix.ARCH }}.tar.gz"
           tag: "lncrawl"
           release_name: "lncrawl RootFS Tarball"
           overwrite: true
