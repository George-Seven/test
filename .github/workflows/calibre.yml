name: Build Calibre
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        PLATFORM: [aarch64, x86_64]
    steps:
      - name: Set Build Architecture
        run: |
          if [ "${{ matrix.PLATFORM }}" = "aarch64" ]; then
            echo "ARCH=arm64/v8" >> $GITHUB_ENV
          elif [ "${{ matrix.PLATFORM }}" = "x86_64" ]; then
            echo "ARCH=amd64" >> $GITHUB_ENV
          else
            echo "Unsupported architecture"
            exit 1
          fi

      - name: Build Calibre
        run: |
          sudo PIP_ROOT_USER_ACTION=ignore PIP_BREAK_SYSTEM_PACKAGES=1 pip install -U udocker
          mkdir -p "${HOME}/.udocker/lib"
          cat <<'EOF' > "${HOME}/.udocker/udocker.conf"
          [DEFAULT]
          proot_link2symlink = True
          EOF
          #echo "2.9.9" > "${HOME}/.udocker/lib/VERSION"
          sudo apt install -y qemu-user wget
          # cd "$HOME/.udocker/containers/calibre/ROOT"
          # chmod 755 -R "lib" "usr/lib" "usr/libexec" "bin" "usr/bin" "sbin" "usr/sbin"
          # find "usr/lib" "usr/libexec" "usr/bin" "usr/sbin" -type f ! -name "ld-*\.so*" ! -name "libc\.so*" -exec upx -qq -1 "{}" \;
          mkdir -p calibre _upx
          wget -O proot https://github.com/proot-me/proot/releases/download/v5.3.0/proot-v5.3.0-x86_64-static
          chmod 755 proot
          _PROOT="$(pwd)/proot"
          # Fix errors when extracting hardlinks from Docker images
          # https://github.com/indigo-dc/udocker/issues/388#issuecomment-1527277800
          UDOCKER_PATCH='
          --- udocker/container/structure.py
          +++ udocker.mod/container/structure.py
          @@ -281,7 +281,7 @@
                       if Msg.level >= Msg.VER:
                           verbose = '\'v'\''
                           Msg().out("Info: extracting:", tarf, l=Msg.INF)
          -            cmd = ["tar", "-C", destdir, "-x" + verbose,
          +            cmd = ["'$_PROOT'", "--link2symlink", "tar", "-C", destdir, "-x" + verbose,
                              "--one-file-system", "--no-same-owner", "--overwrite",
                              "--exclude=dev/*", "--exclude=etc/udev/devices/*",
                              "--no-same-permissions", r"--exclude=.wh.*",
          '
          TMP_PATCH_FILE="$(mktemp)"
          sudo patch -p0 --no-backup-if-mismatch -r "${TMP_PATCH_FILE}" -d "$(python -c "import sysconfig; print(sysconfig.get_path('platlib'))" 2>/dev/null || echo "${PREFIX}/lib/python3.11/site-packages")" 2>/dev/null >/dev/null <<< "${UDOCKER_PATCH}" || true
          sudo rm -rf "${TMP_PATCH_FILE}"
          #echo "use_proot_executable = $_PROOT" >> "${HOME}/.udocker/udocker.conf"
          wget -O- https://github.com/upx/upx/releases/download/v4.2.4/upx-4.2.4-amd64_linux.tar.xz | tar -Jx --strip-components=1 -C _upx
          mv _upx/upx .
          rm -rf _upx
          _UPX="$(pwd)/upx"
          udocker run --name=calibre --nosysdirs -v /dev -v /proc -v /sys --platform "linux/${{ env.ARCH }}" alpine ash -c 'echo "nameserver 1.1.1.1" > /etc/resolv.conf && echo "@testing https://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories && apk update && apk add --no-cache -u calibre@testing || true'
          udocker export -o calibre.tar calibre
          #"$_PROOT" --link2symlink tar -xf calibre.tar -C calibre
          tar -xf calibre.tar -C calibre
          cd calibre
          #chmod 755 -R "lib" "usr/lib" "usr/libexec" "bin" "usr/bin" "sbin" "usr/sbin"
          #find "lib" "usr/lib" "usr/libexec" "bin" "usr/bin" "sbin" "usr/sbin" -type f ! -name "ld-*\.so*" ! -name "libc\.so*" ! -name "libc\.musl*\.so*" ! -name busybox ! -name "python*" -exec upx -qq -1 --android-shlib "{}" \;
          chmod 755 -R "usr/lib"
          #find "usr/lib" -type f ! -name "*musl*so*" ! -name "*\.py" ! -name "*\.pyc" -exec upx -qq -1 --android-shlib "{}" \;
          _TMP_DIR="$(mktemp -d)"
          for i in $(find "usr/lib" -type f ! -name "*musl*so*" ! -name "*\.py" ! -name "*\.pyc"); do
            _filename="$(basename "$i")"
            cp -L "$i" "$_TMP_DIR/$_filename".ori
            if "$_UPX" -qq -1 --android-shlib "$i"; then
              cp -L "$i" "$_TMP_DIR/$_filename".upx
              if "$_UPX" -qqq -d "$i"; then
                cp -L "$_TMP_DIR/$_filename".upx "$i"
              else
                cp -L "$_TMP_DIR/$_filename".ori "$i"
              fi
              rm "$_TMP_DIR/$_filename".upx
            else
              cp -L "$_TMP_DIR/$_filename".ori "$i"
            fi
            rm "$_TMP_DIR/$_filename".ori
          done
          cd ..
          sleep 1
          tar -I "gzip --best" -cf calibre.tar.gz ./calibre

      - name: Upload Release
        uses: svenstaro/upload-release-action@v2
        with:
           repo_token: ${{ secrets.GITHUB_TOKEN }}
           file: "calibre.tar.gz"
           asset_name: "calibre-${{ matrix.PLATFORM }}.tar.gz"
           tag: "calibre"
           release_name: "Calibre"
           overwrite: true
